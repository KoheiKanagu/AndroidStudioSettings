<templateSet group="Flutter">
  <template name="cnst" value="const $NAME$({ Key key }): super(key: key);" description="Const" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
      <option name="DART_STATEMENT" value="false" />
      <option name="DART_TOPLEVEL" value="false" />
    </context>
  </template>
  <template name="stless" value="class $NAME$ extends StatelessWidget {&#10;  const $NAME$({ Key key }): super(key: key);&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Container($END$);&#10;  }&#10;}&#10;" description="New Stateless widget" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="stful" value="class $NAME$ extends StatefulWidget {&#10;  const $NAME$({ Key key }): super(key: key);&#10;  @override&#10;  _$NAME$State createState() =&gt; _$NAME$State();&#10;}&#10;&#10;class _$NAME$State extends State&lt;$NAME$&gt; {&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Container($END$);&#10;  }&#10;}&#10;" description="New Stateful widget" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="stanim" value="class $NAME$ extends StatefulWidget {&#10;  @override&#10;  _$NAME$State createState() =&gt; _$NAME$State();&#10;}&#10;&#10;class _$NAME$State extends State&lt;$NAME$&gt; with SingleTickerProviderStateMixin {&#10;  AnimationController _controller;&#10;&#10;  @override&#10;  void initState() {&#10;    super.initState();&#10;    _controller = AnimationController(vsync: this);&#10;  }&#10;&#10;  @override&#10;  void dispose() {&#10;    _controller.dispose();&#10;    super.dispose();&#10;  }&#10;  &#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Container($END$);&#10;  }&#10;}&#10;" description="New Stateful widget with AnimationController" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="rtnm" value="static const routeName = '$TEXT$';" description="" toReformat="false" toShortenFQNames="true">
    <variable name="TEXT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="wwd" value="static Widget withDependencies() { return $TEXT$; }" description="wwd" toReformat="false" toShortenFQNames="true">
    <variable name="TEXT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="flpg" value="import 'package:flutter/material.dart';&#10;&#10;class $NAME$Page extends StatelessWidget {&#10;  const $NAME$Page({ Key key }): super(key: key);&#10;&#10;  static const routeName = '/$NAME_SNAKE$';&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold($END$);&#10;  }&#10;}&#10;" description="新規Pageテンプレ" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME_SNAKE" expression="snakeCase(NAME)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="clschm" value="final colorScheme = Theme.of(context).colorScheme;" description="colorScheme" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="l10n" value="final l10n = L10n.of(context);" description="l10n" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="txtthm" value="final textTheme = Theme.of(context).textTheme;" description="textTheme" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="freezed" value="import 'package:flutter/foundation.dart';&#10;import 'package:freezed_annotation/freezed_annotation.dart';&#10;&#10;part '$NAME_SNAKE$.freezed.dart';&#10;&#10;@freezed&#10;abstract class $NAME$ with _$$$NAME$ {&#10;  const factory $NAME$.still() = _Still;&#10;&#10;  const factory $NAME$.progress() = _Progress;&#10;&#10;  const factory $NAME$.done() = _Done;&#10;&#10;  const factory $NAME$.error() = _Error;&#10;}&#10;" description="Freezedテンプレ" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="false" />
    <variable name="NAME_SNAKE" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="valuenotifier" value="import 'package:flutter/foundation.dart';&#10;&#10;class $NAME$&#10;    extends ValueNotifier&lt;$STATE$&gt; {&#10;  $NAME$() : super(const $STATE$.still());&#10;  &#10;  $END$&#10;}&#10;" description="ValueNotifierテンプレ" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="true" />
    <variable name="STATE" expression="regularExpression(capitalize(camelCase(fileNameWithoutExtension())), &quot;Notifier&quot;, &quot;State&quot;)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="jsonserializable" value="import 'package:json_annotation/json_annotation.dart';&#10;import 'package:to_string/to_string.dart';&#10;&#10;part '$NAME_SNAKE$.g.dart';&#10;&#10;@JsonSerializable()&#10;@ToString(prettyPrint: true)&#10;class $NAME$ {&#10;  $NAME$();&#10;&#10;  factory $NAME$.fromJson(Map&lt;String, dynamic&gt; json) =&gt;&#10;      _$$$NAME$FromJson(json);&#10;&#10;  Map&lt;String, dynamic&gt; toJson() =&gt; _$$$NAME$ToJson(this);&#10;&#10;  @JsonKey(name: '')&#10;  $END$&#10;&#10;&#10;  @override&#10;  String toString() =&gt; _$$$NAME$ToString(this);&#10;}&#10;" description="JsonSerializableテンプレ" toReformat="true" toShortenFQNames="true">
    <variable name="NAME_SNAKE" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="statelesswidget" value="import 'package:flutter/material.dart';&#10;&#10;class $NAME$ extends StatelessWidget {&#10;  const $NAME$({Key key}) : super(key: key);&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Container($END$);&#10;  }&#10;}&#10;" description="StatelessWidgetテンプレ" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="statenotifier" value="import 'package:flutter/foundation.dart';&#10;import 'package:freezed_annotation/freezed_annotation.dart';&#10;import 'package:state_notifier/state_notifier.dart';&#10;&#10;import '$NAME_SNAKE$_state.dart';&#10;&#10;class $NAME$Controller extends StateNotifier&lt;$NAME$State&gt; with LocatorMixin {&#10;  $NAME$Controller() : super($NAME$State()) {&#10;    $END$&#10;  }&#10;}" description="StateNotifierのテンプレ" toReformat="false" toShortenFQNames="true">
    <variable name="NAME_SNAKE" expression="snakeCase(regularExpression(capitalize(camelCase(fileNameWithoutExtension())), &quot;Controller&quot;, &quot;&quot;))" defaultValue="" alwaysStopAt="false" />
    <variable name="NAME" expression="regularExpression(capitalize(camelCase(fileNameWithoutExtension())), &quot;Controller&quot;, &quot;&quot;)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="test" value="import 'package:test/test.dart';&#10;&#10;void main() {&#10;  test('$TEST$', () async {&#10;    $END$&#10;  });&#10;}&#10;" description="Unitテストのテンプレ" toReformat="false" toShortenFQNames="true">
    <variable name="TEST" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="state" value="import 'package:flutter/foundation.dart';&#10;import 'package:freezed_annotation/freezed_annotation.dart';&#10;&#10;part '$NAME_SNAKE$.freezed.dart';&#10;&#10;@freezed&#10;abstract class $NAME$ with _$$$NAME$ {&#10;  const factory $NAME$({&#10;    $END$&#10;  }) = _$NAME$;&#10;}" description="Stateのテンプレ" toReformat="false" toShortenFQNames="true">
    <variable name="NAME_SNAKE" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false" />
    <variable name="NAME" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
</templateSet>